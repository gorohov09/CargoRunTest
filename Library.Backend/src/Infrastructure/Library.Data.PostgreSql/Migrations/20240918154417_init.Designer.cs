// <auto-generated />
using System;
using Library.Data.PostgreSql;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Library.Data.PostgreSql.Migrations
{
    [DbContext(typeof(EfContext))]
    [Migration("20240918154417_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Library.Domain.Entities.Author", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Название");

                    b.HasKey("Id")
                        .HasName("pk_author");

                    b.ToTable("author", "public", t =>
                        {
                            t.HasComment("Автор");
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.Book", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid")
                        .HasColumnName("author_id")
                        .HasComment("Идентификатор автора");

                    b.Property<Guid?>("BlockedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("blocked_user_id")
                        .HasComment("Идентификатор пользователя, забронировавшего книгу");

                    b.Property<Guid>("GenreId")
                        .HasColumnType("uuid")
                        .HasColumnName("genre_id")
                        .HasComment("Идентификатор жанра");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Название");

                    b.Property<Guid?>("PickedUserId")
                        .HasColumnType("uuid")
                        .HasColumnName("picked_user_id")
                        .HasComment("Идентификатор пользователя, читающего книгу в библиотеке");

                    b.Property<Guid>("PublisherId")
                        .HasColumnType("uuid")
                        .HasColumnName("publisher_id")
                        .HasComment("Идентификатор издателя");

                    b.HasKey("Id")
                        .HasName("pk_book");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("ix_book_author_id");

                    b.HasIndex("BlockedUserId")
                        .HasDatabaseName("ix_book_blocked_user_id");

                    b.HasIndex("GenreId")
                        .HasDatabaseName("ix_book_genre_id");

                    b.HasIndex("PickedUserId")
                        .HasDatabaseName("ix_book_picked_user_id");

                    b.HasIndex("PublisherId")
                        .HasDatabaseName("ix_book_publisher_id");

                    b.ToTable("book", "public", t =>
                        {
                            t.HasComment("Книга");
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.Genre", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Название");

                    b.HasKey("Id")
                        .HasName("pk_genre");

                    b.ToTable("genre", "public", t =>
                        {
                            t.HasComment("Жанр");
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.Publisher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Название");

                    b.HasKey("Id")
                        .HasName("pk_publisher");

                    b.ToTable("publisher", "public", t =>
                        {
                            t.HasComment("Издатель");
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.HasKey("Id")
                        .HasName("pk_role");

                    b.ToTable("role", "public", t =>
                        {
                            t.HasComment("Роль");
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.RolePrivilege", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<int>("Privilege")
                        .HasColumnType("integer")
                        .HasColumnName("privilege")
                        .HasComment("Право доступа");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id")
                        .HasComment("Идентификатор роли");

                    b.HasKey("Id")
                        .HasName("pk_role_privilege");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_role_privilege_role_id");

                    b.ToTable("role_privilege", "public", t =>
                        {
                            t.HasComment("Право доступа для роли");
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id")
                        .HasDefaultValueSql("uuid_in(md5(random()::text || clock_timestamp()::text)::cstring)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email")
                        .HasComment("Электронная почта");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("first_name")
                        .HasComment("Имя");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("last_name")
                        .HasComment("Фамилия");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("password_hash")
                        .HasComment("Хеш пароля");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid")
                        .HasColumnName("role_id")
                        .HasComment("Идентификатор роли");

                    b.HasKey("Id")
                        .HasName("pk_user");

                    b.HasIndex("RoleId")
                        .HasDatabaseName("ix_user_role_id");

                    b.ToTable("user", "public", t =>
                        {
                            t.HasComment("Пользователь");
                        });
                });

            modelBuilder.Entity("Library.Domain.Entities.Book", b =>
                {
                    b.HasOne("Library.Domain.Entities.Author", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_author_author_id");

                    b.HasOne("Library.Domain.Entities.User", "BlockedUser")
                        .WithMany("BlockedBooks")
                        .HasForeignKey("BlockedUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("fk_book_user_blocked_user_id");

                    b.HasOne("Library.Domain.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_genre_genre_id");

                    b.HasOne("Library.Domain.Entities.User", "PickedUser")
                        .WithMany("GivenBooks")
                        .HasForeignKey("PickedUserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .HasConstraintName("fk_book_user_picked_user_id");

                    b.HasOne("Library.Domain.Entities.Publisher", "Publisher")
                        .WithMany()
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_book_publisher_publisher_id");

                    b.Navigation("Author");

                    b.Navigation("BlockedUser");

                    b.Navigation("Genre");

                    b.Navigation("PickedUser");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("Library.Domain.Entities.RolePrivilege", b =>
                {
                    b.HasOne("Library.Domain.Entities.Role", "Role")
                        .WithMany("Privileges")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_role_privilege_role_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Library.Domain.Entities.User", b =>
                {
                    b.HasOne("Library.Domain.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired()
                        .HasConstraintName("fk_user_role_role_id");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Library.Domain.Entities.Role", b =>
                {
                    b.Navigation("Privileges");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Library.Domain.Entities.User", b =>
                {
                    b.Navigation("BlockedBooks");

                    b.Navigation("GivenBooks");
                });
#pragma warning restore 612, 618
        }
    }
}
